{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shade\\\\OneDrive\\\\Documents\\\\DevProject\\\\boutique-interactive\\\\boutique-frontend\\\\src\\\\components\\\\ReportList\\\\ReportList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ReportList() {\n  _s();\n  const [reports, setReports] = useState([]);\n  const [selectedRows, setSelectedRows] = useState([]);\n\n  // Fetch reports from the backend when the component mounts and whenever reports are updated\n  useEffect(() => {\n    fetchReports();\n  }, []);\n\n  // Function to fetch reports from the backend\n  const fetchReports = async () => {\n    try {\n      const response = await fetch('/api/reports');\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(data); // Check what data looks like\n      setReports(data);\n    } catch (error) {\n      console.error('Failed to fetch reports:', error);\n    }\n  };\n\n  // Function to handle checkbox selection\n  const handleCheckboxChange = (event, reportId) => {\n    if (event.target.checked) {\n      setSelectedRows([...selectedRows, reportId]);\n    } else {\n      setSelectedRows(selectedRows.filter(id => id !== reportId));\n    }\n  };\n\n  // Function to delete selected reports\n  const deleteSelectedReports = async () => {\n    try {\n      const response = await fetch('/api/reports', {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          reportIds: selectedRows\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      // Refresh the list of reports after deletion\n      fetchReports();\n      // Clear the selected rows\n      setSelectedRows([]);\n    } catch (error) {\n      console.error('Failed to delete reports:', error);\n    }\n  };\n\n  // Function to update the table with the latest data from the database\n  const handleRefresh = () => {\n    fetchReports();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Reports List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRefresh,\n      children: \"Refresh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: deleteSelectedReports,\n      children: \"Delete Selected Reports\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Select\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Report ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Report Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: reports.map((report, index // Added `index` to use as a fallback key\n        ) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [' ', /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: selectedRows.includes(report.id || index) // Adjusted for `id` or `index`\n              ,\n              onChange: e => handleCheckboxChange(e, report.id || index)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: report.id || index\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 17\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"td\", {\n            children: report.report_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 17\n          }, this), ' ', /*#__PURE__*/_jsxDEV(\"td\", {\n            children: report.query_text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 17\n          }, this)]\n        }, report.id || index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_s(ReportList, \"/PS4MUlddHnu+hfyG9TCfdlc9c8=\");\n_c = ReportList;\nexport default ReportList;\nvar _c;\n$RefreshReg$(_c, \"ReportList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ReportList","_s","reports","setReports","selectedRows","setSelectedRows","fetchReports","response","fetch","ok","Error","status","data","json","console","log","error","handleCheckboxChange","event","reportId","target","checked","filter","id","deleteSelectedReports","method","headers","body","JSON","stringify","reportIds","handleRefresh","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","report","index","type","includes","onChange","e","report_name","query_text","_c","$RefreshReg$"],"sources":["C:/Users/shade/OneDrive/Documents/DevProject/boutique-interactive/boutique-frontend/src/components/ReportList/ReportList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction ReportList() {\r\n  const [reports, setReports] = useState([]);\r\n  const [selectedRows, setSelectedRows] = useState([]);\r\n\r\n  // Fetch reports from the backend when the component mounts and whenever reports are updated\r\n  useEffect(() => {\r\n    fetchReports();\r\n  }, []);\r\n\r\n  // Function to fetch reports from the backend\r\n  const fetchReports = async () => {\r\n    try {\r\n      const response = await fetch('/api/reports');\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n      const data = await response.json();\r\n      console.log(data); // Check what data looks like\r\n      setReports(data);\r\n    } catch (error) {\r\n      console.error('Failed to fetch reports:', error);\r\n    }\r\n  };\r\n\r\n  // Function to handle checkbox selection\r\n  const handleCheckboxChange = (event, reportId) => {\r\n    if (event.target.checked) {\r\n      setSelectedRows([...selectedRows, reportId]);\r\n    } else {\r\n      setSelectedRows(selectedRows.filter((id) => id !== reportId));\r\n    }\r\n  };\r\n\r\n  // Function to delete selected reports\r\n  const deleteSelectedReports = async () => {\r\n    try {\r\n      const response = await fetch('/api/reports', {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ reportIds: selectedRows }),\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n      // Refresh the list of reports after deletion\r\n      fetchReports();\r\n      // Clear the selected rows\r\n      setSelectedRows([]);\r\n    } catch (error) {\r\n      console.error('Failed to delete reports:', error);\r\n    }\r\n  };\r\n\r\n  // Function to update the table with the latest data from the database\r\n  const handleRefresh = () => {\r\n    fetchReports();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Reports List</h2>\r\n      <button onClick={handleRefresh}>Refresh</button>{' '}\r\n      {/* Button to trigger data refresh */}\r\n      <button onClick={deleteSelectedReports}>Delete Selected Reports</button>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Select</th>\r\n            <th>Report ID</th>\r\n            <th>Report Name</th>\r\n            {/* Add other columns as needed */}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {reports.map(\r\n            (\r\n              report,\r\n              index // Added `index` to use as a fallback key\r\n            ) => (\r\n              <tr key={report.id || index}>\r\n                {' '}\r\n                {/* Use report.id if available, otherwise use index */}\r\n                <td>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={selectedRows.includes(report.id || index)} // Adjusted for `id` or `index`\r\n                    onChange={(e) =>\r\n                      handleCheckboxChange(e, report.id || index)\r\n                    }\r\n                  />\r\n                </td>\r\n                <td>{report.id || index}</td> {/* Display `id` or `index` */}\r\n                <td>{report.report_name}</td>{' '}\r\n                {/* Adjusted to match your data */}\r\n                {/* Assuming you want to display `query_text` as well */}\r\n                <td>{report.query_text}</td>\r\n              </tr>\r\n            )\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ReportList;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}