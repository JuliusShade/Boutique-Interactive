{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shade\\\\OneDrive\\\\Documents\\\\DevProject\\\\boutique-interactive\\\\boutique-frontend\\\\src\\\\components\\\\ColumnSelector\\\\ColumnSelector.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ColumnSelector = ({\n  columns,\n  selectedColumns,\n  setSelectedColumns\n}) => {\n  _s();\n  const [availableColumns, setAvailableColumns] = useState([]);\n  useEffect(() => {\n    const fetchColumns = async () => {\n      try {\n        const response = await fetch('/api/boutiques/columns');\n        const data = await response.json();\n        setAvailableColumns(data);\n      } catch (error) {\n        console.error('Error fetching columns:', error);\n      }\n    };\n    fetchColumns();\n  }, []);\n  const handleChange = event => {\n    // For a multi-select, you need to handle multiple options being selected\n    const values = Array.from(event.target.selectedOptions, option => option.value);\n    setSelectedColumns(values);\n  };\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    multiple: true,\n    value: selectedColumns,\n    onChange: handleChange,\n    children: availableColumns.map((column, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: column,\n      children: column\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 18\n    }, this) // Using index as key for simplicity\n    )\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n_s(ColumnSelector, \"18ARgafTVeZdTBJIFLbyzkoUyB4=\");\n_c = ColumnSelector;\nexport default ColumnSelector;\nvar _c;\n$RefreshReg$(_c, \"ColumnSelector\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ColumnSelector","columns","selectedColumns","setSelectedColumns","_s","availableColumns","setAvailableColumns","fetchColumns","response","fetch","data","json","error","console","handleChange","event","values","Array","from","target","selectedOptions","option","value","multiple","onChange","children","map","column","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/shade/OneDrive/Documents/DevProject/boutique-interactive/boutique-frontend/src/components/ColumnSelector/ColumnSelector.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst ColumnSelector = ({ columns, selectedColumns, setSelectedColumns }) => {\r\n    const [availableColumns, setAvailableColumns] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchColumns = async () => {\r\n            try {\r\n                const response = await fetch('/api/boutiques/columns');\r\n                const data = await response.json();\r\n                setAvailableColumns(data);\r\n            } catch (error) {\r\n                console.error('Error fetching columns:', error);\r\n            }\r\n        };\r\n\r\n        fetchColumns();\r\n    }, []);\r\n\r\n    const handleChange = (event) => {\r\n        // For a multi-select, you need to handle multiple options being selected\r\n        const values = Array.from(event.target.selectedOptions, option => option.value);\r\n        setSelectedColumns(values);\r\n    };\r\n\r\n    return (\r\n        <select multiple value={selectedColumns} onChange={handleChange}>\r\n            {availableColumns.map((column, index) => (\r\n                 <option key={index} value={column}>{column}</option> // Using index as key for simplicity\r\n            ))}\r\n        </select>\r\n    );\r\n};\r\n\r\nexport default ColumnSelector;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,cAAc,GAAGA,CAAC;EAAEC,OAAO;EAAEC,eAAe;EAAEC;AAAmB,CAAC,KAAK;EAAAC,EAAA;EACzE,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE5DC,SAAS,CAAC,MAAM;IACZ,MAAMU,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAwB,CAAC;QACtD,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCL,mBAAmB,CAACI,IAAI,CAAC;MAC7B,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACnD;IACJ,CAAC;IAEDL,YAAY,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMO,YAAY,GAAIC,KAAK,IAAK;IAC5B;IACA,MAAMC,MAAM,GAAGC,KAAK,CAACC,IAAI,CAACH,KAAK,CAACI,MAAM,CAACC,eAAe,EAAEC,MAAM,IAAIA,MAAM,CAACC,KAAK,CAAC;IAC/EnB,kBAAkB,CAACa,MAAM,CAAC;EAC9B,CAAC;EAED,oBACIjB,OAAA;IAAQwB,QAAQ;IAACD,KAAK,EAAEpB,eAAgB;IAACsB,QAAQ,EAAEV,YAAa;IAAAW,QAAA,EAC3DpB,gBAAgB,CAACqB,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,kBAC/B7B,OAAA;MAAoBuB,KAAK,EAAEK,MAAO;MAAAF,QAAA,EAAEE;IAAM,GAA7BC,KAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAiC,CAAC,CAAC;IACzD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEjB,CAAC;AAAC5B,EAAA,CA9BIJ,cAAc;AAAAiC,EAAA,GAAdjC,cAAc;AAgCpB,eAAeA,cAAc;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}