{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shade\\\\OneDrive\\\\Documents\\\\DevProject\\\\boutique-interactive\\\\boutique-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ColumnSelector from './components/ColumnSelector/ColumnSelector';\nimport SortingFiltering from './components/Filter/Filtering';\nimport DataTable from './components/DataTable/DataTable';\nimport SaveReportForm from './components/SaveReportForm/SaveReportForm';\nimport { constructSafeQuery } from './path/to/your/backend/controller';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [selectedColumns, setSelectedColumns] = useState([]);\n  const [reportData, setReportData] = useState({\n    columns: [],\n    rows: []\n  });\n  const [sortConfig, setSortConfig] = useState({});\n  const [filters, setFilters] = useState({});\n  const [sortCriteria, setSortCriteria] = useState({\n    column: null,\n    direction: 'ASC'\n  });\n  const updateSortCriteria = (column, direction) => {\n    setSortCriteria({\n      column,\n      direction\n    });\n  };\n  const handleSortChange = (column, direction) => {\n    setSortCriteria({\n      column,\n      direction\n    });\n    fetchReportData(); // Optionally, immediately fetch/report data based on new sort criteria\n  };\n  const handleFilterChange = filters => {\n    setFilters(filters);\n    fetchReportData(); // Optionally, immediately fetch/report data based on new filter criteria\n  };\n  const applyFiltersAndFetchData = () => {\n    fetchReportData();\n    // Call this function when filter values change or when the 'Generate Report' button is clicked\n  };\n\n  // Function to fetch the report data based on selected columns\n  const fetchReportData = async () => {\n    try {\n      const response = await fetch(`/api/boutiques/report`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          selectedColumns,\n          filters,\n          sortCriteria\n        }) // Add real filter logic here\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      setReportData({\n        columns: selectedColumns,\n        rows: data\n      });\n    } catch (error) {\n      console.error('Failed to fetch report data:', error);\n    }\n  };\n  const replaceVariablesInQuery = (queryText, filters) => {\n    let replacedQuery = queryText;\n    Object.keys(filters).forEach((key, index) => {\n      const placeholder = `$${index + 1}`;\n      const value = filters[key].toLowerCase();\n      replacedQuery = replacedQuery.replace(new RegExp(placeholder, 'g'), value);\n    });\n    return replacedQuery;\n  };\n  const handleSaveReport = async reportName => {\n    try {\n      // Construct the query text\n      const queryText = constructSafeQuery(selectedColumns, filters, sortCriteria).text;\n\n      // Replace variables in the query text with filter values\n      const replacedQuery = replaceVariablesInQuery(queryText, filters);\n      const response = await fetch('/api/boutiques/saveReport', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          reportName,\n          queryText: replacedQuery,\n          // Pass the replaced query text\n          reportData: reportData.rows\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      // Handle successful save\n      alert('Report saved successfully!');\n    } catch (error) {\n      console.error('Error saving report:', error);\n      alert('Failed to save the report.');\n    }\n  };\n  console.log('App state - selectedColumns:', selectedColumns);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dynamic Report Builder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ColumnSelector, {\n      selectedColumns: selectedColumns,\n      setSelectedColumns: setSelectedColumns\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SortingFiltering, {\n      availableColumns: selectedColumns,\n      onFilterChange: handleFilterChange,\n      onSortChange: handleSortChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: applyFiltersAndFetchData,\n      children: \"Generate Report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n      data: reportData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SaveReportForm, {\n      onSave: handleSaveReport\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"9Jf2Ti6byzgcn1w+Rhq4fuoe+Z8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ColumnSelector","SortingFiltering","DataTable","SaveReportForm","constructSafeQuery","jsxDEV","_jsxDEV","App","_s","selectedColumns","setSelectedColumns","reportData","setReportData","columns","rows","sortConfig","setSortConfig","filters","setFilters","sortCriteria","setSortCriteria","column","direction","updateSortCriteria","handleSortChange","fetchReportData","handleFilterChange","applyFiltersAndFetchData","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","error","console","replaceVariablesInQuery","queryText","replacedQuery","Object","keys","forEach","key","index","placeholder","value","toLowerCase","replace","RegExp","handleSaveReport","reportName","text","alert","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","availableColumns","onFilterChange","onSortChange","onClick","onSave","_c","$RefreshReg$"],"sources":["C:/Users/shade/OneDrive/Documents/DevProject/boutique-interactive/boutique-frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ColumnSelector from './components/ColumnSelector/ColumnSelector';\nimport SortingFiltering from './components/Filter/Filtering';\nimport DataTable from './components/DataTable/DataTable';\nimport SaveReportForm from './components/SaveReportForm/SaveReportForm';\nimport { constructSafeQuery } from './path/to/your/backend/controller';\nimport './App.css';\n\nfunction App() {\n  const [selectedColumns, setSelectedColumns] = useState([]);\n  const [reportData, setReportData] = useState({ columns: [], rows: [] });\n  const [sortConfig, setSortConfig] = useState({});\n  const [filters, setFilters] = useState({});\n\n  const [sortCriteria, setSortCriteria] = useState({\n    column: null,\n    direction: 'ASC',\n  });\n\n  const updateSortCriteria = (column, direction) => {\n    setSortCriteria({ column, direction });\n  };\n\n  const handleSortChange = (column, direction) => {\n    setSortCriteria({ column, direction });\n    fetchReportData(); // Optionally, immediately fetch/report data based on new sort criteria\n  };\n\n  const handleFilterChange = (filters) => {\n    setFilters(filters);\n    fetchReportData(); // Optionally, immediately fetch/report data based on new filter criteria\n  };\n\n  const applyFiltersAndFetchData = () => {\n    fetchReportData();\n    // Call this function when filter values change or when the 'Generate Report' button is clicked\n  };\n\n  // Function to fetch the report data based on selected columns\n  const fetchReportData = async () => {\n    try {\n      const response = await fetch(`/api/boutiques/report`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ selectedColumns, filters, sortCriteria }), // Add real filter logic here\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      setReportData({\n        columns: selectedColumns,\n        rows: data,\n      });\n    } catch (error) {\n      console.error('Failed to fetch report data:', error);\n    }\n  };\n\n  const replaceVariablesInQuery = (queryText, filters) => {\n    let replacedQuery = queryText;\n    Object.keys(filters).forEach((key, index) => {\n      const placeholder = `$${index + 1}`;\n      const value = filters[key].toLowerCase();\n      replacedQuery = replacedQuery.replace(\n        new RegExp(placeholder, 'g'),\n        value\n      );\n    });\n    return replacedQuery;\n  };\n\n  const handleSaveReport = async (reportName) => {\n    try {\n      // Construct the query text\n      const queryText = constructSafeQuery(\n        selectedColumns,\n        filters,\n        sortCriteria\n      ).text;\n\n      // Replace variables in the query text with filter values\n      const replacedQuery = replaceVariablesInQuery(queryText, filters);\n\n      const response = await fetch('/api/boutiques/saveReport', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          reportName,\n          queryText: replacedQuery, // Pass the replaced query text\n          reportData: reportData.rows,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      // Handle successful save\n      alert('Report saved successfully!');\n    } catch (error) {\n      console.error('Error saving report:', error);\n      alert('Failed to save the report.');\n    }\n  };\n\n  console.log('App state - selectedColumns:', selectedColumns);\n  return (\n    <div className=\"App\">\n      <h1>Dynamic Report Builder</h1>\n      <ColumnSelector\n        selectedColumns={selectedColumns}\n        setSelectedColumns={setSelectedColumns}\n      />\n      <SortingFiltering\n        availableColumns={selectedColumns}\n        onFilterChange={handleFilterChange}\n        onSortChange={handleSortChange}\n      />\n      <button onClick={applyFiltersAndFetchData}>Generate Report</button>\n      <DataTable data={reportData} />\n      <SaveReportForm onSave={handleSaveReport} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}