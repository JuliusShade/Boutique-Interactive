{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shade\\\\OneDrive\\\\Documents\\\\DevProject\\\\boutique-interactive\\\\boutique-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ColumnSelector from './components/ColumnSelector/ColumnSelector';\nimport SortingFiltering from './components/Filter/Filtering';\nimport DataTable from './components/DataTable/DataTable';\nimport SaveReportForm from './components/SaveReportForm/SaveReportForm';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [selectedColumns, setSelectedColumns] = useState([]);\n  const [reportData, setReportData] = useState({\n    columns: [],\n    rows: []\n  });\n  const [sortConfig, setSortConfig] = useState({});\n  const [filters, setFilters] = useState({});\n  const [sortCriteria, setSortCriteria] = useState({\n    column: null,\n    direction: 'ASC'\n  });\n  const updateSortCriteria = (column, direction) => {\n    setSortCriteria({\n      column,\n      direction\n    });\n  };\n  const handleSortChange = (column, direction) => {\n    setSortCriteria({\n      column,\n      direction\n    });\n    fetchReportData(); // Optionally, immediately fetch/report data based on new sort criteria\n  };\n  const handleFilterChange = (column, value) => {\n    setFilters(currentFilters => {\n      const updatedFilters = {\n        ...currentFilters\n      };\n      if (value) {\n        updatedFilters[column] = value; // Set or update the filter value\n      } else {\n        delete updatedFilters[column]; // Remove the filter if the value is empty\n      }\n      return updatedFilters;\n    });\n  };\n  const applyFiltersAndFetchData = () => {\n    fetchReportData();\n    // Call this function when filter values change or when the 'Generate Report' button is clicked\n  };\n\n  // Function to fetch the report data based on selected columns\n  const fetchReportData = async () => {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/api/boutiques/report`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          selectedColumns,\n          filters,\n          sortCriteria\n        }) // Add real filter logic here\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      setReportData({\n        columns: selectedColumns,\n        rows: data\n      });\n    } catch (error) {\n      console.error('Failed to fetch report data:', error);\n    }\n  };\n\n  // Handle the save report form submission\n  const handleSaveReport = async reportName => {\n    try {\n      const response = await fetch('/api/boutiques/saveReport', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          reportName,\n          selectedColumns,\n          reportData: reportData.rows\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      // Handle successful save\n      alert('Report saved successfully!');\n    } catch (error) {\n      console.error('Error saving report:', error);\n      alert('Failed to save the report.');\n    }\n  };\n  console.log('App state - selectedColumns:', selectedColumns);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dynamic Report Builder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ColumnSelector, {\n      selectedColumns: selectedColumns,\n      setSelectedColumns: setSelectedColumns\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SortingFiltering, {\n      availableColumns: selectedColumns,\n      onFilterChange: handleFilterChange,\n      onSortChange: handleSortChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: applyFiltersAndFetchData,\n      children: \"Generate Report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n      data: reportData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SaveReportForm, {\n      onSave: handleSaveReport\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"9Jf2Ti6byzgcn1w+Rhq4fuoe+Z8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ColumnSelector","SortingFiltering","DataTable","SaveReportForm","jsxDEV","_jsxDEV","App","_s","selectedColumns","setSelectedColumns","reportData","setReportData","columns","rows","sortConfig","setSortConfig","filters","setFilters","sortCriteria","setSortCriteria","column","direction","updateSortCriteria","handleSortChange","fetchReportData","handleFilterChange","value","currentFilters","updatedFilters","applyFiltersAndFetchData","response","fetch","process","env","REACT_APP_API_URL","method","headers","body","JSON","stringify","ok","Error","status","data","json","error","console","handleSaveReport","reportName","alert","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","availableColumns","onFilterChange","onSortChange","onClick","onSave","_c","$RefreshReg$"],"sources":["C:/Users/shade/OneDrive/Documents/DevProject/boutique-interactive/boutique-frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ColumnSelector from './components/ColumnSelector/ColumnSelector';\nimport SortingFiltering from './components/Filter/Filtering';\nimport DataTable from './components/DataTable/DataTable';\nimport SaveReportForm from './components/SaveReportForm/SaveReportForm';\nimport './App.css';\n\nfunction App() {\n  const [selectedColumns, setSelectedColumns] = useState([]);\n  const [reportData, setReportData] = useState({ columns: [], rows: [] });\n  const [sortConfig, setSortConfig] = useState({});\n  const [filters, setFilters] = useState({});\n\n  const [sortCriteria, setSortCriteria] = useState({\n    column: null,\n    direction: 'ASC',\n  });\n\n  const updateSortCriteria = (column, direction) => {\n    setSortCriteria({ column, direction });\n  };\n\n  const handleSortChange = (column, direction) => {\n    setSortCriteria({ column, direction });\n    fetchReportData(); // Optionally, immediately fetch/report data based on new sort criteria\n  };\n\n  const handleFilterChange = (column, value) => {\n    setFilters((currentFilters) => {\n      const updatedFilters = { ...currentFilters };\n      if (value) {\n        updatedFilters[column] = value; // Set or update the filter value\n      } else {\n        delete updatedFilters[column]; // Remove the filter if the value is empty\n      }\n      return updatedFilters;\n    });\n  };\n\n  const applyFiltersAndFetchData = () => {\n    fetchReportData();\n    // Call this function when filter values change or when the 'Generate Report' button is clicked\n  };\n\n  // Function to fetch the report data based on selected columns\n  const fetchReportData = async () => {\n    try {\n      const response = await fetch(\n        `${process.env.REACT_APP_API_URL}/api/boutiques/report`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ selectedColumns, filters, sortCriteria }), // Add real filter logic here\n        }\n      );\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      setReportData({\n        columns: selectedColumns,\n        rows: data,\n      });\n    } catch (error) {\n      console.error('Failed to fetch report data:', error);\n    }\n  };\n\n  // Handle the save report form submission\n  const handleSaveReport = async (reportName) => {\n    try {\n      const response = await fetch('/api/boutiques/saveReport', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          reportName,\n          selectedColumns,\n          reportData: reportData.rows,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      // Handle successful save\n      alert('Report saved successfully!');\n    } catch (error) {\n      console.error('Error saving report:', error);\n      alert('Failed to save the report.');\n    }\n  };\n\n  console.log('App state - selectedColumns:', selectedColumns);\n  return (\n    <div className=\"App\">\n      <h1>Dynamic Report Builder</h1>\n      <ColumnSelector\n        selectedColumns={selectedColumns}\n        setSelectedColumns={setSelectedColumns}\n      />\n      <SortingFiltering\n        availableColumns={selectedColumns}\n        onFilterChange={handleFilterChange}\n        onSortChange={handleSortChange}\n      />\n      <button onClick={applyFiltersAndFetchData}>Generate Report</button>\n      <DataTable data={reportData} />\n      <SaveReportForm onSave={handleSaveReport} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,cAAc,MAAM,4CAA4C;AACvE,OAAOC,gBAAgB,MAAM,+BAA+B;AAC5D,OAAOC,SAAS,MAAM,kCAAkC;AACxD,OAAOC,cAAc,MAAM,4CAA4C;AACvE,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC;IAAEa,OAAO,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAG,CAAC,CAAC;EACvE,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAChD,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE1C,MAAM,CAACmB,YAAY,EAAEC,eAAe,CAAC,GAAGpB,QAAQ,CAAC;IAC/CqB,MAAM,EAAE,IAAI;IACZC,SAAS,EAAE;EACb,CAAC,CAAC;EAEF,MAAMC,kBAAkB,GAAGA,CAACF,MAAM,EAAEC,SAAS,KAAK;IAChDF,eAAe,CAAC;MAAEC,MAAM;MAAEC;IAAU,CAAC,CAAC;EACxC,CAAC;EAED,MAAME,gBAAgB,GAAGA,CAACH,MAAM,EAAEC,SAAS,KAAK;IAC9CF,eAAe,CAAC;MAAEC,MAAM;MAAEC;IAAU,CAAC,CAAC;IACtCG,eAAe,CAAC,CAAC,CAAC,CAAC;EACrB,CAAC;EAED,MAAMC,kBAAkB,GAAGA,CAACL,MAAM,EAAEM,KAAK,KAAK;IAC5CT,UAAU,CAAEU,cAAc,IAAK;MAC7B,MAAMC,cAAc,GAAG;QAAE,GAAGD;MAAe,CAAC;MAC5C,IAAID,KAAK,EAAE;QACTE,cAAc,CAACR,MAAM,CAAC,GAAGM,KAAK,CAAC,CAAC;MAClC,CAAC,MAAM;QACL,OAAOE,cAAc,CAACR,MAAM,CAAC,CAAC,CAAC;MACjC;MACA,OAAOQ,cAAc;IACvB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,wBAAwB,GAAGA,CAAA,KAAM;IACrCL,eAAe,CAAC,CAAC;IACjB;EACF,CAAC;;EAED;EACA,MAAMA,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MACF,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CACzB,GAAEC,OAAO,CAACC,GAAG,CAACC,iBAAkB,uBAAsB,EACvD;QACEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAE/B,eAAe;UAAEQ,OAAO;UAAEE;QAAa,CAAC,CAAC,CAAE;MACpE,CACF,CAAC;MACD,IAAI,CAACY,QAAQ,CAACU,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAE,uBAAsBX,QAAQ,CAACY,MAAO,EAAC,CAAC;MAC3D;MACA,MAAMC,IAAI,GAAG,MAAMb,QAAQ,CAACc,IAAI,CAAC,CAAC;MAClCjC,aAAa,CAAC;QACZC,OAAO,EAAEJ,eAAe;QACxBK,IAAI,EAAE8B;MACR,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC;;EAED;EACA,MAAME,gBAAgB,GAAG,MAAOC,UAAU,IAAK;IAC7C,IAAI;MACF,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAC,2BAA2B,EAAE;QACxDI,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBS,UAAU;UACVxC,eAAe;UACfE,UAAU,EAAEA,UAAU,CAACG;QACzB,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACiB,QAAQ,CAACU,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAE,uBAAsBX,QAAQ,CAACY,MAAO,EAAC,CAAC;MAC3D;;MAEA;MACAO,KAAK,CAAC,4BAA4B,CAAC;IACrC,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CI,KAAK,CAAC,4BAA4B,CAAC;IACrC;EACF,CAAC;EAEDH,OAAO,CAACI,GAAG,CAAC,8BAA8B,EAAE1C,eAAe,CAAC;EAC5D,oBACEH,OAAA;IAAK8C,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClB/C,OAAA;MAAA+C,QAAA,EAAI;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/BnD,OAAA,CAACL,cAAc;MACbQ,eAAe,EAAEA,eAAgB;MACjCC,kBAAkB,EAAEA;IAAmB;MAAA4C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC,eACFnD,OAAA,CAACJ,gBAAgB;MACfwD,gBAAgB,EAAEjD,eAAgB;MAClCkD,cAAc,EAAEjC,kBAAmB;MACnCkC,YAAY,EAAEpC;IAAiB;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC,eACFnD,OAAA;MAAQuD,OAAO,EAAE/B,wBAAyB;MAAAuB,QAAA,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACnEnD,OAAA,CAACH,SAAS;MAACyC,IAAI,EAAEjC;IAAW;MAAA2C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC/BnD,OAAA,CAACF,cAAc;MAAC0D,MAAM,EAAEd;IAAiB;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzC,CAAC;AAEV;AAACjD,EAAA,CA5GQD,GAAG;AAAAwD,EAAA,GAAHxD,GAAG;AA8GZ,eAAeA,GAAG;AAAC,IAAAwD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}